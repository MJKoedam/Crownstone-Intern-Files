"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CacheStorage {
    constructor() {
        this.downloadedAll = { spheres: false, crownstones: false, locations: false };
        this.downloadedAllInSphere = {};
        this.spheres = {};
        this.crownstones = {};
        this.locations = {};
        this.users = {};
        this.keys = null;
        this.hubs = {};
        this.user = null;
    }
    findSpheres(filter) {
        let lowerCaseIdentifier = String(filter).toLowerCase();
        return this._find(filter, this.spheres, (item) => {
            if (String(item.uid) === String(filter)) {
                return item;
            }
            else if (item.uuid.toLowerCase() === lowerCaseIdentifier) {
                return item;
            }
        });
    }
    findCrownstones(filter) {
        return this._find(filter, this.crownstones);
    }
    findLocations(filter) {
        return this._find(filter, this.locations, (item) => {
            if (String(item.uid) === String(filter)) {
                return item;
            }
        });
    }
    findUsers(filter) {
        return this._find(filter, this.users);
    }
    _find(filter, container, specifics) {
        let result = [];
        let lowerCaseIdentifier = String(filter).toLowerCase();
        if (typeof filter !== 'object') {
            if (container[lowerCaseIdentifier]) {
                return [container[lowerCaseIdentifier]];
            }
            if (container[filter]) {
                return [container[filter]];
            }
        }
        let itemIds = Object.keys(container);
        for (let i = 0; i < itemIds.length; i++) {
            let itemId = itemIds[i];
            let name = container[itemId].name;
            if (name.toLowerCase() == lowerCaseIdentifier) {
                result.push(container[itemId]);
                continue;
            }
            else if (typeof filter !== "number" && name.search(filter) !== -1) {
                result.push(container[itemId]);
                continue;
            }
            else if (name.toLowerCase().indexOf(lowerCaseIdentifier) !== -1) {
                result.push(container[itemId]);
                continue;
            }
            if (specifics) {
                let specificResult = specifics(container[itemId]);
                if (specificResult) {
                    result.push(specificResult);
                    continue;
                }
            }
        }
        return result;
    }
}
exports.CacheStorage = CacheStorage;
function listCache(container) {
    return Object.keys(container).map((itemId) => { return container[itemId]; });
}
exports.listCache = listCache;
function listCacheItemsInSphereInLocation(container, sphereIds, locationIds, itemIds) {
    let result = listCache(container);
    result = _filter(result, sphereIds, 'sphereId');
    result = _filter(result, locationIds, 'locationId');
    result = _filter(result, itemIds, 'id');
    return result;
}
exports.listCacheItemsInSphereInLocation = listCacheItemsInSphereInLocation;
function listCacheItemsInSphere(container, sphereIds, itemIds) {
    let result = listCache(container);
    result = _filter(result, sphereIds, 'sphereId');
    result = _filter(result, itemIds, 'id');
    return result;
}
exports.listCacheItemsInSphere = listCacheItemsInSphere;
function listCacheItemsInLocation(container, locationIds, itemIds) {
    let result = listCache(container);
    result = _filter(result, locationIds, 'locationId');
    result = _filter(result, itemIds, 'id');
    return result;
}
exports.listCacheItemsInLocation = listCacheItemsInLocation;
function listCacheItems(container, itemIds) {
    let result = listCache(container);
    result = _filter(result, itemIds, 'id');
    return result;
}
exports.listCacheItems = listCacheItems;
function _filter(itemArray, idArray, field) {
    if (idArray.length === 0) {
        return itemArray;
    }
    return itemArray.filter((item) => { return idArray.indexOf(item[field]) !== -1; });
}
function gotAllInSphere(cache, sphereId, type) {
    if (cache.downloadedAllInSphere[sphereId] === undefined) {
        cache.downloadedAllInSphere[sphereId] = { crownstones: false, locations: false, users: false };
    }
    cache.downloadedAllInSphere[sphereId][type] = true;
}
exports.gotAllInSphere = gotAllInSphere;
//# sourceMappingURL=cache.js.map