import { Toolchain } from "./tools/toolchain";
import { CloudRequestorInterface } from "./tools/requestors";
import { Spheres } from "./dataContainers/Spheres";
import { Locations } from "./dataContainers/locations";
import { Crownstones } from "./dataContainers/crownstones";
import { User } from "./dataContainers/user";
export declare class CrownstoneCloud {
    toolchain: Toolchain;
    rest: CloudRequestorInterface;
    constructor(customEndpoint?: string);
    login(email: string, password: string): Promise<UserLoginData>;
    loginHashed(email: string, hashedPassword: string): Promise<UserLoginData>;
    hubLogin(hubId: string, hubToken: string): Promise<HubLoginData>;
    setAccessToken(accessToken: string, userId?: string): void;
    spheres(filter?: filter): Spheres;
    locations(filter?: filter): Locations;
    crownstones(filter?: filter): Crownstones;
    crownstoneById(id: string): Crownstones;
    keys(): Promise<cloud_Keys[]>;
    me(): User;
}
/**
 spheres
 - crownstones
 - locations
 - users
A - keys()
A - data()


 crownstones
A - data
A - turnOn
A - turnOff
A - switch(number)
A - canDim()
A - isLocked()

 locations
 A - data

 users
 A - data

 */ 
