'use strict';

/**
 * @license MIT
 * @copyright debug contributors, <commenthol@gmail.com>
 * @see https://github.com/visionmedia/debug
 */

var _require = require('./utils'),
    DEBUG = _require.DEBUG,
    INFO = _require.INFO,
    WARN = _require.WARN,
    ERROR = _require.ERROR,
    FATAL = _require.FATAL,
    OFF = _require.OFF;

var LEVELS = [DEBUG, INFO, WARN, ERROR, FATAL, OFF];
var LEVELS_REGEX = RegExp('^(' + LEVELS.join('|') + '):', 'i');

module.exports = Namespaces;

function Namespaces(namespaces) {
  this.enable(namespaces);
}

Namespaces.prototype = {
  enable: function enable(namespaces) {
    this.skips = [];
    this.names = [];

    var splited = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = splited[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _namespace = _step.value;

        if (!_namespace) continue; // ignore empty strings

        var _namespaceNLevel = this._namespaceNLevel(_namespace),
            namespace = _namespaceNLevel.namespace,
            level = _namespaceNLevel.level;

        if (namespace[0] === '-') {
          this.skips.push({ re: new RegExp('^' + namespace.substr(1) + '$') });
        } else {
          this.names.push({ re: new RegExp('^' + namespace + '$'), level: level });
        }
      }

      // sort names by levels
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.names = this.names.sort(function (a, b) {
      return LEVELS.indexOf(a.level) - LEVELS.indexOf(b.level);
    });
  },
  disable: function disable() {
    /* istanbul ignore next */
    this.enable('');
  },
  isEnabled: function isEnabled(name, level) {
    if (name === '*') {
      return level || 'DEBUG';
    }
    if (!this.names.length) {
      return level;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this.skips[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _skip = _step2.value;

        if (_skip.re.test(name)) {
          return;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = this.names[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _name = _step3.value;

        if (_name.re.test(name)) {
          return _name.level || level || 'DEBUG';
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  },


  /**
   * @private
   */
  _namespaceNLevel: function _namespaceNLevel(_namespace) {
    var level = (LEVELS_REGEX.exec(_namespace) || [])[1];
    var namespace = _namespace.replace(LEVELS_REGEX, '').replace(/\*/g, '.*?');
    return { namespace: namespace, level: level };
  }
};