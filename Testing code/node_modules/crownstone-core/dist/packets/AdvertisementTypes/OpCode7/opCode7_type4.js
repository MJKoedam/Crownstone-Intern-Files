"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Timestamp_1 = require("../../../util/Timestamp");
const Util_1 = require("../../../util/Util");
const index_1 = require("../../../index");
function parseOpCode7_type4(serviceData, data) {
    if (data.length == 16) {
        let payload = new index_1.DataStepper(data);
        serviceData.stateOfExternalCrownstone = false;
        payload.skip(); // first byte is the datatype.
        serviceData.crownstoneId = payload.getUInt8();
        serviceData.switchState = payload.getUInt8();
        serviceData.flagsBitmask = payload.getUInt8();
        serviceData.behaviourMasterHash = payload.getUInt16();
        payload.skip(6);
        serviceData.partialTimestamp = payload.getUInt16();
        payload.skip();
        serviceData.validation = payload.getUInt8();
        serviceData.stateOfExternalCrownstone = false;
        // bitmask states
        let bitmaskArray = Util_1.Util.getBitMaskUInt8(serviceData.flagsBitmask);
        serviceData.dimmerReady = bitmaskArray[0];
        serviceData.dimmingAllowed = bitmaskArray[1];
        serviceData.hasError = bitmaskArray[2];
        serviceData.switchLocked = bitmaskArray[3];
        serviceData.timeIsSet = bitmaskArray[4];
        serviceData.switchCraftEnabled = bitmaskArray[5];
        serviceData.tapToToggleEnabled = bitmaskArray[6];
        serviceData.behaviourOverridden = bitmaskArray[7];
        serviceData.uniqueIdentifier = serviceData.partialTimestamp;
        if (serviceData.timeIsSet) {
            serviceData.timestamp = Timestamp_1.reconstructTimestamp(new Date().valueOf() * 1000, serviceData.partialTimestamp);
        }
        else {
            serviceData.timestamp = serviceData.partialTimestamp; // this is now a counter
        }
    }
}
exports.parseOpCode7_type4 = parseOpCode7_type4;
//# sourceMappingURL=opCode7_type4.js.map