"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CrownstoneError_1 = require("../protocol/CrownstoneError");
const enums_1 = require("../declarations/enums");
class DataStepper {
    constructor(buffer) {
        this.buffer = null;
        this.position = 0;
        this.length = 0;
        this.buffer = buffer;
        this.length = buffer.length;
    }
    getUInt8() {
        let source = this._request(1);
        return source.readUInt8(0);
    }
    getUInt16() {
        let source = this._request(2);
        return source.readUInt16LE(0);
    }
    skip(count = 1) {
        if (this.position + count <= this.length) {
            this.position += count;
        }
        else {
            throw new CrownstoneError_1.CrownstoneError(enums_1.CrownstoneErrorType.INVALID_DATA_LENGTH, "Tried to get more bytes from buffer than were available.");
        }
    }
    getBuffer(size) {
        return this._request(size);
    }
    _request(size) {
        if (this.position + size <= this.length) {
            let start = this.position;
            this.position += size;
            return this.buffer.slice(start, this.position);
        }
        else {
            throw new CrownstoneError_1.CrownstoneError(enums_1.CrownstoneErrorType.INVALID_DATA_LENGTH, "Tried to get more bytes from buffer than were available.");
        }
    }
}
exports.DataStepper = DataStepper;
class DataWriter {
    constructor(totalSize) {
        this.position = 0;
        this.totalSize = 0;
        this.totalSize = totalSize;
        this.buffer = Buffer.alloc(totalSize);
    }
    getBuffer() {
        return this.buffer;
    }
    putUInt32(data) {
        this._place(data, 4, "writeUInt32LE");
    }
    putUInt24(data) {
        let tempBuffer = Buffer.alloc(4);
        tempBuffer.writeUInt32LE(data, 0);
        this._place(tempBuffer[0], 1, "writeUInt8");
        this._place(tempBuffer[1], 1, "writeUInt8");
        this._place(tempBuffer[2], 1, "writeUInt8");
    }
    putUInt16(data) {
        this._place(data, 2, "writeUInt16LE");
    }
    putUInt8(data) {
        this._place(data, 2, "writeUInt8");
    }
    _place(data, count, method) {
        this.position += count;
        if (this.totalSize - 1 - this.position > 0) {
            this.buffer[method](data, this.position);
        }
        else {
            throw new CrownstoneError_1.CrownstoneError(enums_1.CrownstoneErrorType.BUFFER_TOO_SHORT_FOR_DATA, "You tried to push more data into the buffer than you have allocated space for.");
        }
    }
}
exports.DataWriter = DataWriter;
//# sourceMappingURL=DataStepper.js.map