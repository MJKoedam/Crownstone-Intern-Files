"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class StoneMultiSwitchPacket {
    /**
     * crownstoneId:
     * state:  number [0..255]
     **/
    constructor(crownstoneId, state) {
        this.crownstoneId = 0;
        this.state = 0;
        this.crownstoneId = crownstoneId;
        if (state <= 1) {
            this.state = Math.min(1, Math.max(0, state)) * 100; // map to [0 .. 100]
        }
        else {
            this.state = state;
        }
    }
    getPacket() {
        let packet = Buffer.alloc(2);
        packet.writeUInt8(this.crownstoneId, 0);
        packet.writeUInt8(this.state, 1);
        return packet;
    }
}
exports.StoneMultiSwitchPacket = StoneMultiSwitchPacket;
class MeshMultiSwitchPacket {
    constructor(packets) {
        this.packets = [];
        this.packets = packets;
    }
    getPacket() {
        let packet = Buffer.alloc(1);
        packet.writeUInt8(this.packets.length, 0);
        for (let i = 0; i < this.packets.length; i++) {
            packet = Buffer.concat([packet, this.packets[i].getPacket()]);
        }
        return packet;
    }
}
exports.MeshMultiSwitchPacket = MeshMultiSwitchPacket;
//# sourceMappingURL=MeshPackets.js.map