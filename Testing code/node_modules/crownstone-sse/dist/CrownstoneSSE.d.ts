/// <reference types="node" />
import Timeout = NodeJS.Timeout;
import EventSource from "eventsource";
export declare const defaultHeaders: {
    Accept: string;
    'Content-Type': string;
};
interface sseOptions {
    sseUrl?: string;
    loginUrl?: string;
    hubLoginBase?: string;
    autoreconnect?: boolean;
}
interface cachedLoginData {
    hub?: {
        hubId: string;
        hubToken: string;
    };
    user?: {
        email: string;
        hashedPassword: string;
    };
}
export declare class CrownstoneSSE {
    log: Logger;
    autoreconnect: boolean;
    eventSource: EventSource;
    accessToken: string | null;
    eventCallback: (data: SseEvent) => void;
    checkerInterval: Timeout;
    reconnectTimeout: Timeout;
    pingTimeout: Timeout;
    sse_url: string;
    login_url: string;
    hubLogin_baseUrl: string;
    cachedLoginData: cachedLoginData;
    constructor(options?: sseOptions);
    login(email: any, password: any): Promise<void>;
    loginHashed(email: any, sha1passwordHash: any): Promise<void>;
    hubLogin(hubId: string, hubToken: string): Promise<void>;
    retryLogin(): Promise<void>;
    setAccessToken(token: any): void;
    stop(): void;
    /**
     * The cloud will ping every 30 seconds. If this is not received after 40 seconds, we restart the connection.
     * @private
     */
    _messageReceived(): void;
    _clearPendingActions(): void;
    start(eventCallback: (data: SseEvent) => void): Promise<void>;
}
export {};
