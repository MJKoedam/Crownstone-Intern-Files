"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const toolchain_1 = require("./tools/toolchain");
const Spheres_1 = require("./dataContainers/Spheres");
const locations_1 = require("./dataContainers/locations");
const crownstones_1 = require("./dataContainers/crownstones");
const user_1 = require("./dataContainers/user");
const crypto = require('crypto');
const shasum = crypto.createHash('sha1');
class CrownstoneCloud {
    constructor(customEndpoint) {
        this.toolchain = new toolchain_1.Toolchain();
        this.rest = this.toolchain.getCloudRequestor(customEndpoint);
    }
    async login(email, password) {
        shasum.update(String(password));
        let hashedPassword = shasum.digest('hex');
        return await this.loginHashed(email, hashedPassword);
    }
    async loginHashed(email, hashedPassword) {
        this.toolchain.loadUserData(email, hashedPassword);
        let result = await this.rest.login();
        this.toolchain.loadAccessToken(result.id, result.userId);
        return { accessToken: result.id, ttl: result.ttl, userId: result.userId };
    }
    async hubLogin(hubId, hubToken) {
        this.toolchain.loadHubData(hubId, hubToken);
        let result = await this.rest.hubLogin();
        this.toolchain.loadAccessToken(result.id);
        return { accessToken: result.id, ttl: result.ttl };
    }
    setAccessToken(accessToken, userId) {
        this.toolchain.loadAccessToken(accessToken, userId);
    }
    spheres(filter = null) {
        return new Spheres_1.Spheres(this.rest, filter);
    }
    locations(filter = null) {
        return new locations_1.Locations(this.rest, null, filter);
    }
    crownstones(filter = null) {
        return new crownstones_1.Crownstones(this.rest, null, null, filter);
    }
    crownstoneById(id) {
        let cs = new crownstones_1.Crownstones(this.rest, null, null, id);
        return cs.id(id);
    }
    async keys() {
        if (this.toolchain.cache.keys !== null) {
            return this.toolchain.cache.keys;
        }
        else {
            return await this.rest.getKeys();
        }
    }
    me() {
        return new user_1.User(this.rest);
    }
}
exports.CrownstoneCloud = CrownstoneCloud;
/**
 spheres
 - crownstones
 - locations
 - users
A - keys()
A - data()


 crownstones
A - data
A - turnOn
A - turnOff
A - switch(number)
A - canDim()
A - isLocked()

 locations
 A - data

 users
 A - data

 */ 
//# sourceMappingURL=CrownstoneCloud.js.map