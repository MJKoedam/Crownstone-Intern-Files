"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const toolchain_1 = require("./tools/toolchain");
const user_1 = require("./dataContainers/user");
const sphere_1 = require("./dataContainers/sphere");
const Location_1 = require("./dataContainers/Location");
const crownstone_1 = require("./dataContainers/crownstone");
const hub_1 = require("./dataContainers/hub");
const crypto = require('crypto');
class CrownstoneCloud {
    constructor(customEndpoint) {
        this.toolchain = new toolchain_1.Toolchain();
        this.rest = this.toolchain.getCloudRequestor(customEndpoint);
    }
    async login(email, password) {
        let hashedPassword = this.hashPassword(password);
        return await this.loginHashed(email, hashedPassword);
    }
    async loginHashed(email, hashedPassword) {
        this.toolchain.loadUserData(email, hashedPassword);
        let result = await this.rest.login();
        this.toolchain.loadAccessToken(result.id, result.userId);
        return { accessToken: result.id, ttl: result.ttl, userId: result.userId };
    }
    async hubLogin(hubId, hubToken) {
        this.toolchain.loadHubData(hubId, hubToken);
        let result = await this.rest.hubLogin();
        this.toolchain.loadAccessToken(result.id);
        return { accessToken: result.id, ttl: result.ttl };
    }
    hashPassword(plaintextPassword) {
        let shasum = crypto.createHash('sha1');
        shasum.update(String(plaintextPassword));
        let hashedPassword = shasum.digest('hex');
        return hashedPassword;
    }
    setAccessToken(accessToken, userId) {
        this.toolchain.loadAccessToken(accessToken, userId);
    }
    async spheres() {
        let spheres = [];
        if (this.rest.isUser()) {
            spheres = await this.rest.getSpheres();
        }
        else if (this.rest.isHub()) {
            spheres = [await this.rest.getHubSphere()];
        }
        return spheres;
    }
    async locations() {
        return await this.rest.getLocations();
    }
    async crownstones() {
        return await this.rest.getCrownstones();
    }
    async keys() {
        if (this.toolchain.cache.keys !== null) {
            return this.toolchain.cache.keys;
        }
        else {
            return await this.rest.getKeys();
        }
    }
    sphere(id) {
        if (!id) {
            throw new Error("Sphere ID is mandatory!");
        }
        return new sphere_1.Sphere(this.rest, id);
    }
    location(id) {
        if (!id) {
            throw new Error("Location ID is mandatory!");
        }
        return new Location_1.Location(this.rest, id);
    }
    crownstone(id) {
        if (!id) {
            throw new Error("Crownstone ID is mandatory!");
        }
        return new crownstone_1.Crownstone(this.rest, id);
    }
    me() {
        return new user_1.User(this.rest);
    }
    hub() {
        return new hub_1.Hub(this.rest);
    }
}
exports.CrownstoneCloud = CrownstoneCloud;
//# sourceMappingURL=CrownstoneCloud.js.map