"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudCore_1 = require("../../rest/cloudCore");
const Logger_1 = require("../../Logger");
exports.defaultHeaders = {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
};
exports.uploadHeaders = {
    'Accept': 'application/json',
    'Content-Type': 'multipart/form-data',
};
const log = Logger_1.Logger(__filename);
class WebhookStoreClass {
}
exports.WebhookStore = new WebhookStoreClass();
/**
 * The rest API is designed to maintain the REST endpoints and to handle responses and errors on the network level.
 * When the responses come back successfully, the convenience wrappers allow callbacks for relevant scenarios.
 */
exports.webhookApiBase = {
    _networkErrorHandler: (err) => { },
    _post: function (options) {
        return cloudCore_1.request(options, 'POST', exports.defaultHeaders, _getId(options.endPoint, exports.WebhookStore), exports.WebhookStore.api_key);
    },
    _get: function (options) {
        return cloudCore_1.request(options, 'GET', exports.defaultHeaders, _getId(options.endPoint, exports.WebhookStore), exports.WebhookStore.api_key);
    },
    _delete: function (options) {
        return cloudCore_1.request(options, 'DELETE', exports.defaultHeaders, _getId(options.endPoint, exports.WebhookStore), exports.WebhookStore.api_key);
    },
    _put: function (options) {
        return cloudCore_1.request(options, 'PUT', exports.defaultHeaders, _getId(options.endPoint, exports.WebhookStore), exports.WebhookStore.api_key);
    },
    _head: function (options) {
        return cloudCore_1.request(options, 'HEAD', exports.defaultHeaders, _getId(options.endPoint, exports.WebhookStore), exports.WebhookStore.api_key);
    },
    /**
     * This method will check the return type error code for 200 or 204 and unpack the data from the response.
     * @param {string} reqType
     * @param {string} endpoint
     * @param {requestOptions} options
     * @param {requestType} type
     * @returns {Promise<any>}
     * @private
     */
    _setupRequest: function (reqType, endpoint, options = {}, type = 'query') {
        let promiseBody = { endPoint: endpoint, data: options.data, type: type, options: options };
        let promise;
        switch (reqType) {
            case 'POST':
                promise = exports.webhookApiBase._post(promiseBody);
                break;
            case 'GET':
                promise = exports.webhookApiBase._get(promiseBody);
                break;
            case 'PUT':
                promise = exports.webhookApiBase._put(promiseBody);
                break;
            case 'DELETE':
                promise = exports.webhookApiBase._delete(promiseBody);
                break;
            case 'HEAD':
                promise = exports.webhookApiBase._head(promiseBody);
                break;
            default:
                log.error("UNKNOWN TYPE:", reqType);
                return;
        }
        return exports.webhookApiBase._finalizeRequest(promise, options, endpoint, promiseBody);
    },
    _finalizeRequest: function (promise, options, endpoint, promiseBody) {
        return new Promise((resolve, reject) => {
            let startTime = new Date().valueOf();
            promise
                .then((reply) => {
                if (reply.status === 200 || reply.status === 204)
                    resolve(reply.data);
                else
                    this.__debugReject(reply, reject, [promise, options, endpoint, promiseBody]);
            })
                .catch((error) => {
                console.trace(error);
                this._handleNetworkError(error, options, endpoint, promiseBody, reject, startTime);
            });
        });
    },
    // END USER API
    // These methods have all the endpoints embedded in them.
    setNetworkErrorHandler: function (handler) { this._networkErrorHandler = handler; },
    _handleNetworkError: function (error, options, endpoint, promiseBody, reject, startTime) { },
    __debugReject: function (reply, reject, debugOptions) {
        log.error("ERROR: HTML ERROR IN API:", reply, debugOptions);
        reject(reply);
    }
};
function _getId(url, obj) {
    let usersLocation = url.indexOf('users');
    if (usersLocation !== -1 && usersLocation < 3)
        return obj.userId;
    let devicesLocation = url.indexOf('listeners');
    if (devicesLocation !== -1 && devicesLocation < 3)
        return obj.listenerId;
}
//# sourceMappingURL=webhookApiBase.js.map