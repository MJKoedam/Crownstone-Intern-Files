"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Util_1 = require("../util/Util");
const requestorBase_1 = require("./requestorBase");
const crownstoneRequests_1 = require("./requests/crownstoneRequests");
const sphereRequests_1 = require("./requests/sphereRequests");
const userRequests_1 = require("./requests/userRequests");
const hubRequests_1 = require("./requests/hubRequests");
const locationRequests_1 = require("./requests/locationRequests");
const webhookRequests_1 = require("./requests/webhookRequests");
class CloudRequestor extends requestorBase_1.RequestorBase {
    constructor(tokenStore, cache, customEndpoint = 'https://cloud.crownstone.rocks/api/') {
        super(tokenStore, cache);
        this.setEndpoint(customEndpoint);
    }
    isUser() {
        return this.tokenStore.cloudUser.userId !== undefined;
    }
    isHub() {
        return this.tokenStore.cloudHub.hubToken !== undefined;
    }
    interface() {
        // @ts-ignore
        return this;
    }
}
exports.CloudRequestor = CloudRequestor;
Util_1.Util.applyMixins(CloudRequestor, [
    userRequests_1.UserRequests,
    locationRequests_1.LocationRequests,
    hubRequests_1.HubRequests,
    sphereRequests_1.SphereRequests,
    crownstoneRequests_1.CrownstoneRequests
]);
class WebhookRequestor extends requestorBase_1.RequestorBase {
    constructor(tokenStore, cache, customEndpoint = 'https://webhooks.crownstone.rocks/api/') {
        super(tokenStore, cache);
        this.setEndpoint(customEndpoint);
    }
    interface() {
        // @ts-ignore
        return this;
    }
}
exports.WebhookRequestor = WebhookRequestor;
Util_1.Util.applyMixins(WebhookRequestor, [
    webhookRequests_1.WebhookRequests,
]);
//# sourceMappingURL=requestors.js.map