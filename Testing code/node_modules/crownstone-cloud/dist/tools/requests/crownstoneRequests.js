"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const requestorBase_1 = require("../requestorBase");
const request_1 = require("../../util/request");
let filter = { searchParams: { filter: JSON.stringify({ "include": ["locations", "currentSwitchState", { "abilities": "properties" }, "behaviours"] }) } };
class CrownstoneRequests extends requestorBase_1.RequestorBase {
    async getCrownstones() {
        const { body } = await request_1.req("GET", `${this.endpoint}Stones/all`, this.addSecurity({ ...filter, responseType: 'json' }));
        // this.cache.downloadedAll['crownstones'] = true;
        return body;
    }
    async getCrownstonesInSphere(sphereId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Spheres/${sphereId}/ownedStones`, this.addSecurity({ ...filter, responseType: 'json' }));
        // gotAllInSphere(this.cache,sphereId,'crownstones');
        return body;
    }
    async getCrownstonesInLocation(locationId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Locations/${locationId}/stones`, this.addSecurity({ ...filter, responseType: 'json' }));
        return body;
    }
    async getCrownstone(stoneId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Stones/${stoneId}`, this.addSecurity({ ...filter, responseType: 'json' }));
        return body;
    }
    async switchCrownstone(stoneId, stoneSwitchData) {
        await request_1.req("POST", `${this.endpoint}Stones/${stoneId}/switch`, this.addSecurity({ json: stoneSwitchData }));
    }
    async getCurrentSwitchState(stoneId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Stones/${stoneId}/currentSwitchStateV2`, this.addSecurity({ responseType: 'json' }));
        return body;
    }
}
exports.CrownstoneRequests = CrownstoneRequests;
//# sourceMappingURL=crownstoneRequests.js.map