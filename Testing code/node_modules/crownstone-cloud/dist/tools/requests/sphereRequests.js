"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const requestorBase_1 = require("../requestorBase");
const request_1 = require("../../util/request");
class SphereRequests extends requestorBase_1.RequestorBase {
    async getSpheres() {
        const { body } = await request_1.req("GET", `${this.endpoint}users/${this.tokenStore.cloudUser.userId}/spheres`, this.addSecurity({ responseType: 'json' }));
        // this.cache.downloadedAll['spheres'] = true;
        return body;
    }
    async getSphere(sphereId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Spheres/${sphereId}`, this.addSecurity({ responseType: 'json' }));
        return body;
    }
    async getUsers(sphereId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Spheres/${sphereId}/users`, this.addSecurity({ responseType: 'json' }));
        // if (!this.cache.downloadedAllInSphere[sphereId]) {
        //   this.cache.downloadedAllInSphere[sphereId] = {};
        // }
        // this.cache.downloadedAllInSphere[sphereId].users = true;
        return body;
    }
    async getSphereAuthorizationTokens(sphereId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Spheres/${sphereId}/tokenData`, this.addSecurity({ responseType: 'json' }));
        return body;
    }
    async getHubSphereId() {
        if (this.tokenStore.cloudHub.hubId === undefined) {
            throw "No Hub loaded.";
        }
        if (this.tokenStore.cloudHub.sphereId === undefined) {
            let { body } = await request_1.req("GET", `${this.endpoint}Hubs/${this.tokenStore.cloudHub.hubId}`, this.addSecurity({ responseType: 'json' }));
            let hubData = body;
            // this.cache.hubs[hubData.id] = hubData;
            let sphereId = hubData.sphereId;
            this.tokenStore.cloudHub.sphereId = sphereId;
            return sphereId;
        }
        else {
            return this.tokenStore.cloudHub.sphereId;
        }
    }
    async getHubSphere() {
        let sphereId = await this.getHubSphereId();
        return await this.getSphere(sphereId);
    }
    async getPresentPeople(sphereId, ignoreDeviceId) {
        const { body } = await request_1.req("GET", `${this.endpoint}Spheres/${sphereId}/presentPeople`, this.addSecurity({ searchParams: { ignoreDeviceId: ignoreDeviceId }, responseType: 'json' }));
        return body;
    }
    async uploadEnergyMeasurementData(energyMeasurementData) {
        if (this.tokenStore.cloudHub.sphereId === undefined) {
            await this.getHubSphereId();
        }
        await request_1.req("POST", `${this.endpoint}Spheres/${this.tokenStore.cloudHub.sphereId}/energyMeasurements`, this.addSecurity({ json: energyMeasurementData }));
    }
}
exports.SphereRequests = SphereRequests;
//# sourceMappingURL=sphereRequests.js.map