"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudCore_1 = require("../cloudCore");
const Logger_1 = require("../../Logger");
exports.defaultHeaders = {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
};
exports.uploadHeaders = {
    'Accept': 'application/json',
    'Content-Type': 'multipart/form-data',
};
const log = Logger_1.Logger(__filename);
class TokenStoreClass {
}
exports.TokenStore = new TokenStoreClass();
/**
 * The rest API is designed to maintain the REST endpoints and to handle responses and errors on the network level.
 * When the responses come back successfully, the convenience wrappers allow callbacks for relevant scenarios.
 */
exports.cloudApiBase = {
    _networkErrorHandler: (err) => { },
    _post: function (options) {
        return cloudCore_1.request(options, 'POST', exports.defaultHeaders, _getId(options.endPoint, exports.TokenStore), exports.TokenStore.accessToken);
    },
    _get: function (options) {
        return cloudCore_1.request(options, 'GET', exports.defaultHeaders, _getId(options.endPoint, exports.TokenStore), exports.TokenStore.accessToken);
    },
    _delete: function (options) {
        return cloudCore_1.request(options, 'DELETE', exports.defaultHeaders, _getId(options.endPoint, exports.TokenStore), exports.TokenStore.accessToken);
    },
    _put: function (options) {
        return cloudCore_1.request(options, 'PUT', exports.defaultHeaders, _getId(options.endPoint, exports.TokenStore), exports.TokenStore.accessToken);
    },
    _head: function (options) {
        return cloudCore_1.request(options, 'HEAD', exports.defaultHeaders, _getId(options.endPoint, exports.TokenStore), exports.TokenStore.accessToken);
    },
    // _uploadImage: function(options) {
    //   let formData = new FormData();
    //   let path = Util.preparePictureURI(options.path, false);
    //   let filename = path.split('/');
    //   filename = filename[filename.length-1];
    //   // cast to any because the typescript typings are incorrect for FormData
    //   (formData as any).append('picture', {uri: path, name: filename, type: 'image/jpg'});
    //   options.data = formData;
    //
    //   return RNFS.exists(Util.preparePictureURI(options.path, false))
    //     .then((fileExists) => {
    //       if (fileExists === false) {
    //         throw "File does not exist."
    //       }
    //       else {
    //         LOGi.rest("CloudAPIBase: file exists, continue upload");
    //         let promise = request(options, 'POST', uploadHeaders, _getId(options.endPoint, TokenStore), TokenStore.accessToken, true);
    //         return this._finalizeRequest(promise, options);
    //       }
    //     })
    //     .catch((err) => { LOGe.rest("_uploadImage: failed to check if file exists:", err); })
    // },
    // _download: function(options, toPath, beginCallback?, progressCallback?) {
    //   return download(options, _getId(options.endPoint, TokenStore), TokenStore.accessToken, toPath, beginCallback, progressCallback)
    // },
    // downloadFile: function(url, targetPath, callbacks) {
    //   return downloadFile(url, targetPath, callbacks);
    // },
    _handleNetworkError: function (error, options, endpoint, promiseBody, reject, startTime) {
        // this will eliminate all rest requests.
        this._networkErrorHandler(error);
        reject(error);
    },
    /**
     * This method will check the return type error code for 200 or 204 and unpack the data from the response.
     * @param {string} reqType
     * @param {string} endpoint
     * @param {requestOptions} options
     * @param {requestType} type
     * @returns {Promise<any>}
     * @private
     */
    _setupRequest: function (reqType, endpoint, options = {}, type = 'query') {
        let promiseBody = { endPoint: endpoint, data: options.data, type: type, options: options };
        let promise;
        switch (reqType) {
            case 'POST':
                promise = exports.cloudApiBase._post(promiseBody);
                break;
            case 'GET':
                promise = exports.cloudApiBase._get(promiseBody);
                break;
            case 'PUT':
                promise = exports.cloudApiBase._put(promiseBody);
                break;
            case 'DELETE':
                promise = exports.cloudApiBase._delete(promiseBody);
                break;
            case 'HEAD':
                promise = exports.cloudApiBase._head(promiseBody);
                break;
            default:
                log.error("UNKNOWN TYPE:", reqType);
                return;
        }
        return exports.cloudApiBase._finalizeRequest(promise, options, endpoint, promiseBody);
    },
    _finalizeRequest: function (promise, options, endpoint, promiseBody) {
        return new Promise((resolve, reject) => {
            let startTime = new Date().valueOf();
            promise
                .then((reply) => {
                if (reply.status === 200 || reply.status === 204)
                    resolve(reply.data);
                else
                    this.__debugReject(reply, reject, [promise, options, endpoint, promiseBody]);
            })
                .catch((error) => {
                console.trace(error);
                this._handleNetworkError(error, options, endpoint, promiseBody, reject, startTime);
            });
        });
    },
    // END USER API
    // These methods have all the endpoints embedded in them.
    setNetworkErrorHandler: function (handler) { this._networkErrorHandler = handler; },
    __debugReject: function (reply, reject, debugOptions) {
        log.error("ERROR: HTML ERROR IN API:", reply, debugOptions);
        reject(reply);
    }
};
function _getId(url, obj) {
    let usersLocation = url.indexOf('users');
    if (usersLocation !== -1 && usersLocation < 3)
        return obj.userId;
    let devicesLocation = url.indexOf('Devices');
    if (devicesLocation !== -1 && devicesLocation < 3)
        return obj.deviceId;
    let eventsLocation = url.indexOf('Events');
    if (eventsLocation !== -1 && eventsLocation < 3)
        return obj.eventId;
    let spheresLocation = url.indexOf('Spheres');
    if (spheresLocation !== -1 && spheresLocation < 3)
        return obj.sphereId;
    let locationsLocation = url.indexOf('Locations');
    if (locationsLocation !== -1 && locationsLocation < 3)
        return obj.locationId;
    let stoneLocation = url.indexOf('Stones');
    if (stoneLocation !== -1 && stoneLocation < 3)
        return obj.stoneId;
    let installationLocation = url.indexOf('AppInstallation');
    if (installationLocation !== -1 && installationLocation < 3)
        return obj.installationId;
    let messagesLocation = url.indexOf('Messages');
    if (messagesLocation !== -1 && messagesLocation < 3)
        return obj.messageId;
    let toonsLocation = url.indexOf('Toons');
    if (toonsLocation !== -1 && toonsLocation < 3)
        return obj.toonId;
    let hubLocation = url.indexOf('Hubs');
    if (hubLocation !== -1 && hubLocation < 3)
        return obj.hubId;
}
//# sourceMappingURL=cloudApiBase.js.map