/// <reference types="node" />
export declare class ControlPacketsGenerator {
    static getFactoryResetPacket(): Buffer;
    static getCommandFactoryResetPacket(): Buffer;
    static getSwitchStatePacket(switchState: number): Buffer;
    static getResetPacket(): Buffer;
    static getPutInDFUPacket(): Buffer;
    static getDisconnectPacket(): Buffer;
    /**
     * @param state : 0 or 1
     * @returns {Buffer}
     */
    static getRelaySwitchPacket(state: any): Buffer;
    /**
     * @param switchState   [0 .. 1]
     * @returns {Buffer}
     */
    static getPwmSwitchPacket(switchState: any): Buffer;
    static getResetErrorPacket(errorMask: any): Buffer;
    /**
     * This is a LOCAL timestamp since epoch in seconds
  
     so if you live in GMT + 1 add 3600 to the timestamp
  
     * @param time
     * @returns {Buffer}
     */
    static getSetTimePacket(time: any): Buffer;
    static getAllowDimmingPacket(allow: any): Buffer;
    static getLockSwitchPacket(lock: any): Buffer;
    static getRegisterTrackedDevicesPacket(trackingNumber: number, locationUID: number, profileId: number, rssiOffset: number, ignoreForPresence: boolean, tapToToggleEnabled: boolean, deviceToken: number, ttlMinutes: number): Buffer;
    static getUartMessagePacket(message: string): Buffer;
    static getSetupPacket(type: any, crownstoneId: any, adminKey: Buffer, memberKey: Buffer, guestKey: Buffer, meshAccessAddress: any, ibeaconUUID: any, ibeaconMajor: any, ibeaconMinor: any): Buffer;
    static getSetupPacketV2(sphereUid: any, crownstoneId: any, adminKey: Buffer, memberKey: Buffer, basicKey: Buffer, serviceDataKey: Buffer, localizationKey: Buffer, meshNetworkKey: Buffer, meshAppKey: Buffer, meshDeviceKey: Buffer, ibeaconUUID: any, ibeaconMajor: any, ibeaconMinor: any): Buffer;
}
