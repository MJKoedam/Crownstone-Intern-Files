"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CrownstoneError_1 = require("../protocol/CrownstoneError");
const enums_1 = require("../declarations/enums");
class DataWriter {
    constructor(totalSize) {
        this.position = 0;
        this.totalSize = 0;
        this.totalSize = totalSize;
        this.buffer = Buffer.alloc(totalSize);
    }
    getBuffer() {
        return this.buffer;
    }
    putBuffer(buffer) {
        this.position += buffer.length;
        this.totalSize += buffer.length;
        this.buffer = Buffer.concat([this.buffer, buffer]);
    }
    putUInt32(data) {
        this._place(data, 4, "writeUInt32LE");
    }
    putUInt24(data) {
        let tempBuffer = Buffer.alloc(4);
        tempBuffer.writeUInt32LE(data, 0);
        this._place(tempBuffer[0], 1, "writeUInt8");
        this._place(tempBuffer[1], 1, "writeUInt8");
        this._place(tempBuffer[2], 1, "writeUInt8");
    }
    putUInt16(data) {
        this._place(data, 2, "writeUInt16LE");
    }
    putUInt8(data) {
        this._place(data, 1, "writeUInt8");
    }
    _place(data, count, method) {
        if (this.totalSize - (this.position + count) >= 0) {
            this.buffer[method](data, this.position);
            this.position += count;
        }
        else {
            throw new CrownstoneError_1.CrownstoneError(enums_1.CrownstoneErrorType.BUFFER_TOO_SHORT_FOR_DATA, "You tried to push more data into the buffer than you have allocated space for.");
        }
    }
}
exports.DataWriter = DataWriter;
//# sourceMappingURL=DataWriter.js.map